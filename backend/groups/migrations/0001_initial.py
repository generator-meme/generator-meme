# Generated by Django 4.1.9 on 2023-06-26 16:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import groups.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('memes', '0015_alter_template_category'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Максимум 300 символов', max_length=300, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Максимум 500 символов', max_length=500, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('closed', models.BooleanField(default=False, verbose_name='Закрытая')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Максимум 100 символов', max_length=100, unique=True, verbose_name='Название роли')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Уровень администратора')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Уровень модератора')),
            ],
            options={
                'verbose_name': 'Роль в группе',
                'verbose_name_plural': 'Роли в группе',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GroupUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата вступления в группу')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_users', to='groups.group')),
                ('role', models.ForeignKey(default=groups.models.GroupRole.get_default_role, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='users', to='groups.grouprole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMeme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления мема в группу')),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_meme_added_by', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memes', to='groups.group')),
                ('meme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meme_groups', to='memes.meme')),
            ],
        ),
        migrations.CreateModel(
            name='GroupBannedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baned_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата бана в группе')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_users', to='groups.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='banlist',
            field=models.ManyToManyField(related_name='group_banlist', through='groups.GroupBannedUser', to=settings.AUTH_USER_MODEL, verbose_name='Банлист группы'),
        ),
        migrations.AddField(
            model_name='group',
            name='memes',
            field=models.ManyToManyField(related_name='groups', through='groups.GroupMeme', to='memes.meme', verbose_name='Мемы группы'),
        ),
        migrations.AddField(
            model_name='group',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='group_owner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец группы'),
        ),
        migrations.AddField(
            model_name='group',
            name='users',
            field=models.ManyToManyField(related_name='meme_groups', through='groups.GroupUser', to=settings.AUTH_USER_MODEL, verbose_name='Участники группы'),
        ),
        migrations.AddConstraint(
            model_name='groupuser',
            constraint=models.UniqueConstraint(fields=('group', 'user'), name='unique_group_user'),
        ),
        migrations.AddConstraint(
            model_name='groupmeme',
            constraint=models.UniqueConstraint(fields=('group', 'meme'), name='unique_group_meme'),
        ),
        migrations.AddConstraint(
            model_name='groupbanneduser',
            constraint=models.UniqueConstraint(fields=('group', 'user'), name='unique_group_user_ban'),
        ),
    ]
